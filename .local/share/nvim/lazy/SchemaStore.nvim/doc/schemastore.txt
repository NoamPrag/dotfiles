*schemastore.txt* Access the SchemaStore catalog from Neovim *schemastore* *schemastore.nvim*

Author:         Maddison Hellstrom <https://github.com/b0o/>
Licence:        MIT
Homepage:       https://github.com/b0o/schemastore.nvim
Version:        0.2.0

==============================================================================
CONTENTS                                                  *schemastore-contents*

    1. Intro ................................ |schemastore-intro|
    2. Changelog ............................ |schemastore-changelog|
    3. License .............................. |schemastore-license|

==============================================================================
1. Intro                                                     *schemastore-intro*

SchemaStore.nvim is a Neovim Lua plugin providing access to the
SchemaStore catalog (https://github.com/SchemaStore/schemastore).

==============================================================================
2. Usage                                                     *schemastore-usage*

To use all of the SchemaStore JSON schemas with lspconfig + jsonls:

>
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  require'lspconfig'.jsonls.setup {
    capabilities = capabilities,
    settings = {
      json = {
        schemas = require('schemastore').json.schemas(),
        validate = { enable = true },
      },
    },
    -- The rest of your jslonls settings
  }
<

For an explanation of why the `validate = { enable = true }` option is recommended,
see https://github.com/b0o/SchemaStore.nvim/issues/8.

You can select a subset of schemas with the `select` option:

>
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  require'lspconfig'.jsonls.setup {
    capabilities = capabilities,
    settings = {
      json = {
        schemas = require('schemastore').json.schemas {
          select = {
            '.eslintrc',
            'package.json',
          },
        },
        validate = { enable = true },
      },
    },
    -- The rest of your jslonls settings
  }
<
Or, you can ignore a list of schemas with the `ignore` option:

>
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  require'lspconfig'.jsonls.setup {
    capabilities = capabilities,
    settings = {
      json = {
        schemas = require('schemastore').json.schemas {
          ignore = {
            'JSON Feed',
          },
        },
        validate = { enable = true },
      },
    },
    -- The rest of your jslonls settings
  }
<

Note that the `select` and `ignore` options are mutually exclusive and
attempting to use them together will throw an error.

You can replace a schema with your own:

>
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  require'lspconfig'.jsonls.setup {
    capabilities = capabilities,
    settings = {
      json = {
        schemas = require('schemastore').json.schemas {
          replace = {
            ['.eslintrc'] = {
              description = "Custom JSON schema for ESLint configuration files",
              fileMatch = { ".eslintrc", ".eslintrc.json", ".eslintrc.yml", ".eslintrc.yaml" },
              name = ".eslintrc",
              url = "https://example.com/schema/eslintrc.json"
            },
          },
        },
        validate = { enable = true },
      },
    },
    -- The rest of your jslonls settings
  }
<

The `select` and `replace` options can be used simultaneously:
>
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  require'lspconfig'.jsonls.setup {
    capabilities = capabilities,
    settings = {
      json = {
        schemas = require('schemastore').json.schemas {
          select = {
            '.eslintrc',
            'package.json',
          },
          replace = {
            ['.eslintrc'] = {
              description = "Custom JSON schema for ESLint configuration files",
              fileMatch = { ".eslintrc", ".eslintrc.json", ".eslintrc.yml", ".eslintrc.yaml" },
              name = ".eslintrc",
              url = "https://example.com/schema/eslintrc.json"
            },
          },
        },
        validate = { enable = true },
      },
    },
    -- The rest of your jslonls settings
  }
<

If you want to include additional schemas, you can use extra:
>
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  require('lspconfig').jsonls.setup {
    capabilities = capabilities,
    settings = {
      json = {
        schemas = require('schemastore').json.schemas {
          extra = {
            {
              description = 'My custom JSON schema',
              fileMatch = 'foo.json',
              name = 'foo.json',
              url = 'https://example.com/schema/foo.json',
            },
            {
              description = 'My other custom JSON schema',
              fileMatch = { 'bar.json', '.baar.json' },
              name = 'bar.json',
              url = 'https://example.com/schema/bar.json',
            },
          },
        },
        validate = { enable = true },
      },
    },
  }
<
==============================================================================
3. Changelog                                             *schemastore-changelog*

26 May 2023                                                             v0.2.0
  Feat: Add `extra` option to add additional schemas (@williamboman)
  Docs: Mention disabling built-in for yaml (@davidosomething)
  Feat: Add support for yamlls (@ZenLian)

21 Dec 2021                                                             v0.1.0
  Perf: Add lookup table from schema name to schema index
  Note that select & ignore are mutually exclusive
  Exit with non-zero code if generate script fails
  Update docs
  Update NOTICE
  Clean up formatting
  Update tests
  Fix example in README
  Feat: Add option to ignore schemas by name

15 Oct 2021                                                             v0.0.1
  Initial Release

==============================================================================
4. License                                                 *schemastore-license*
>
  Apache License, Version 2.0

  Â© 2021-2023 Maddison Hellstrom <github.com/b0o> and Contributors

  Full license information is available in the LICENSE and NOTICE files at the
  root of this repository.
<
 vim:tw=78:ts=8:ft=help:norl:

