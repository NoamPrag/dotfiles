{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Rust for Visual Studio Code (powered by Rust Language Server/Rust Analyzer). Provides lints, code completion and navigation, formatting and more.",
  "properties": {
    "rust-client.autoStartRls": {
      "default": true,
      "description": "Start RLS automatically when opening a file or project.",
      "scope": "resource",
      "type": "boolean"
    },
    "rust-client.channel": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "enum": [
            "default",
            "stable",
            "beta",
            "nightly"
          ],
          "enumDescriptions": [
            "Uses the same channel as your currently open project",
            "Explicitly use the `stable` channel",
            "Explicitly use the `beta` channel",
            "Explicitly use the `nightly` channel"
          ],
          "type": "string"
        }
      ],
      "default": "default",
      "description": "Rust channel to invoke rustup with. Ignored if rustup is disabled. By default, uses the same channel as your currently open project."
    },
    "rust-client.disableRustup": {
      "default": false,
      "description": "Disable usage of rustup and use rustc/rls/rust-analyzer from PATH.",
      "type": "boolean"
    },
    "rust-client.enableMultiProjectSetup": {
      "default": null,
      "description": "Allow multiple projects in the same folder, along with removing the constraint that the cargo.toml must be located at the root. (Experimental: might not work for certain setups)",
      "type": [
        "boolean",
        "null"
      ]
    },
    "rust-client.engine": {
      "default": "rls",
      "description": "The underlying LSP server used to provide IDE support for Rust projects.",
      "enum": [
        "rls",
        "rust-analyzer"
      ],
      "enumDescriptions": [
        "Use the Rust Language Server (RLS)",
        "Use the rust-analyzer language server (NOTE: not fully supported yet)"
      ],
      "scope": "window",
      "type": "string"
    },
    "rust-client.logToFile": {
      "default": false,
      "description": "When set to true, RLS stderr is logged to a file at workspace root level. Requires reloading extension after change.",
      "type": "boolean"
    },
    "rust-client.revealOutputChannelOn": {
      "default": "never",
      "description": "Specifies message severity on which the output channel will be revealed. Requires reloading extension after change.",
      "enum": [
        "info",
        "warn",
        "error",
        "never"
      ],
      "type": "string"
    },
    "rust-client.rlsPath": {
      "default": null,
      "description": "Override RLS path. Only required for RLS developers. If you set this and use rustup, you should also set `rust-client.channel` to ensure your RLS sees the right libraries. If you don't use rustup, make sure to set `rust-client.disableRustup`.",
      "scope": "machine",
      "type": [
        "string",
        "null"
      ]
    },
    "rust-client.rustupPath": {
      "default": "rustup",
      "description": "Path to rustup executable. Ignored if rustup is disabled.",
      "scope": "machine",
      "type": "string"
    },
    "rust-client.trace.server": {
      "default": "off",
      "description": "Traces the communication between VS Code and the Rust language server.",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "scope": "window",
      "type": "string"
    },
    "rust-client.updateOnStartup": {
      "default": false,
      "description": "Update the Rust toolchain and its required components whenever the extension starts up.",
      "type": "boolean"
    },
    "rust.all_features": {
      "default": false,
      "description": "Enable all Cargo features.",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.all_targets": {
      "default": true,
      "description": "Checks the project as if you were running cargo check --all-targets (I.e., check all targets and integration tests too).",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.build_bin": {
      "default": null,
      "description": "Specify to run analysis as if running `cargo check --bin <name>`. Use `null` to auto-detect. (unstable)",
      "scope": "resource",
      "type": [
        "string",
        "null"
      ]
    },
    "rust.build_command": {
      "default": null,
      "description": "EXPERIMENTAL (requires `unstable_features`)\nIf set, executes a given program responsible for rebuilding save-analysis to be loaded by the RLS. The program given should output a list of resulting .json files on stdout. \nImplies `rust.build_on_save`: true.",
      "scope": "resource",
      "type": [
        "string",
        "null"
      ]
    },
    "rust.build_lib": {
      "default": null,
      "description": "Specify to run analysis as if running `cargo check --lib`. Use `null` to auto-detect. (unstable)",
      "scope": "resource",
      "type": [
        "boolean",
        "null"
      ]
    },
    "rust.build_on_save": {
      "default": false,
      "description": "Only index the project when a file is saved and not on change.",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.cfg_test": {
      "default": false,
      "description": "Build cfg(test) code. (unstable)",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.clear_env_rust_log": {
      "default": true,
      "description": "Clear the RUST_LOG environment variable before running rustc or cargo.",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.clippy_preference": {
      "default": "opt-in",
      "description": "Controls eagerness of clippy diagnostics when available. Valid values are (case-insensitive):\n - \"off\": Disable clippy lints.\n - \"on\": Display the same diagnostics as command-line clippy invoked with no arguments (`clippy::all` unless overridden).\n - \"opt-in\": Only display the lints explicitly enabled in the code. Start by adding `#![warn(clippy::all)]` to the root of each crate you want linted.\nYou need to install clippy via rustup if you haven't already.",
      "enum": [
        "on",
        "opt-in",
        "off"
      ],
      "scope": "resource",
      "type": "string"
    },
    "rust.crate_blacklist": {
      "default": [
        "cocoa",
        "gleam",
        "glium",
        "idna",
        "libc",
        "openssl",
        "rustc_serialize",
        "serde",
        "serde_json",
        "typenum",
        "unicode_normalization",
        "unicode_segmentation",
        "winapi"
      ],
      "description": "Overrides the default list of packages for which analysis is skipped.\nAvailable since RLS 1.38",
      "scope": "resource",
      "type": [
        "array",
        "null"
      ]
    },
    "rust.features": {
      "default": [],
      "description": "A list of Cargo features to enable.",
      "scope": "resource",
      "type": "array"
    },
    "rust.full_docs": {
      "default": null,
      "description": "Instructs cargo to enable full documentation extraction during save-analysis while building the crate.",
      "scope": "resource",
      "type": [
        "boolean",
        "null"
      ]
    },
    "rust.ignore_deprecation_warning": {
      "default": false,
      "description": "Whether to surpress the deprecation notification on start up.",
      "type": "boolean"
    },
    "rust.jobs": {
      "default": null,
      "description": "Number of Cargo jobs to be run in parallel.",
      "scope": "resource",
      "type": [
        "number",
        "null"
      ]
    },
    "rust.no_default_features": {
      "default": false,
      "description": "Do not enable default Cargo features.",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.racer_completion": {
      "default": true,
      "description": "Enables code completion using racer.",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.rust-analyzer": {
      "default": {},
      "description": "Settings passed down to rust-analyzer server",
      "scope": "resource",
      "type": "object"
    },
    "rust.rust-analyzer.path": {
      "default": null,
      "description": "When specified, uses the rust-analyzer binary at a given path",
      "type": [
        "string",
        "null"
      ]
    },
    "rust.rust-analyzer.releaseTag": {
      "default": "nightly",
      "description": "Which binary release to download and use",
      "type": "string"
    },
    "rust.rustflags": {
      "default": null,
      "description": "Flags added to RUSTFLAGS.",
      "scope": "resource",
      "type": [
        "string",
        "null"
      ]
    },
    "rust.rustfmt_path": {
      "default": null,
      "description": "When specified, RLS will use the Rustfmt pointed at the path instead of the bundled one",
      "scope": "resource",
      "type": [
        "string",
        "null"
      ]
    },
    "rust.show_hover_context": {
      "default": true,
      "description": "Show additional context in hover tooltips when available. This is often the type local variable declaration.",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.show_warnings": {
      "default": true,
      "description": "Show warnings.",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.sysroot": {
      "default": null,
      "description": "--sysroot",
      "scope": "resource",
      "type": [
        "string",
        "null"
      ]
    },
    "rust.target": {
      "default": null,
      "description": "--target",
      "scope": "resource",
      "type": [
        "string",
        "null"
      ]
    },
    "rust.target_dir": {
      "default": null,
      "description": "When specified, it places the generated analysis files at the specified target directory. By default it is placed target/rls directory.",
      "scope": "resource",
      "type": [
        "string",
        "null"
      ]
    },
    "rust.unstable_features": {
      "default": false,
      "description": "Enable unstable features.",
      "scope": "resource",
      "type": "boolean"
    },
    "rust.wait_to_build": {
      "default": null,
      "description": "Time in milliseconds between receiving a change notification and starting build.",
      "scope": "resource",
      "type": [
        "number",
        "null"
      ]
    }
  }
}
